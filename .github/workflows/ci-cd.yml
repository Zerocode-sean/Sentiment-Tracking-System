name: CI/CD Pipeline for Sentiment Tracking System

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10"]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r Sentiments/requirements.txt
          pip install pytest pytest-cov flake8

      - name: Lint with flake8
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 Sentiments/src --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 Sentiments/src --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Test imports and basic functionality
        run: |
          cd Sentiments
          python -c "import sys; sys.path.append('src'); import streamlit as st; print('✅ Streamlit import successful')"
          python -c "import sys; sys.path.append('src'); from auth_manager import AuthManager; print('✅ Auth manager import successful')"
          python -c "import sys; sys.path.append('src'); from database_manager import DatabaseManager; print('✅ Database manager import successful')"
          python -c "import pandas as pd, numpy as np, sklearn, matplotlib, plotly; print('✅ All ML dependencies imported successfully')"

      - name: Check for security issues
        run: |
          pip install bandit
          bandit -r Sentiments/src -f json -o bandit-report.json || true

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.python-version }}
          path: |
            bandit-report.json

  deployment-check:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - uses: actions/checkout@v3

      - name: Check deployment files
        run: |
          echo "🔍 Checking deployment configuration..."

          # Check if required files exist
          if [ ! -f "Procfile" ]; then
            echo "❌ Procfile missing"
            exit 1
          fi
          echo "✅ Procfile found"

          if [ ! -f "runtime.txt" ]; then
            echo "❌ runtime.txt missing"
            exit 1
          fi
          echo "✅ runtime.txt found"

          if [ ! -f "Sentiments/requirements.txt" ]; then
            echo "❌ requirements.txt missing"
            exit 1
          fi
          echo "✅ requirements.txt found"

          if [ ! -f ".streamlit/config.toml" ]; then
            echo "❌ Streamlit config missing"
            exit 1
          fi
          echo "✅ Streamlit config found"

          echo "🎉 All deployment files present!"

      - name: Validate requirements.txt
        run: |
          echo "📦 Validating requirements.txt..."
          python -m pip install --upgrade pip
          pip install -r Sentiments/requirements.txt --dry-run
          echo "✅ All dependencies are installable"

      - name: Check file structure
        run: |
          echo "📁 Checking project structure..."
          required_dirs=("Sentiments/src" "Sentiments/data" ".streamlit")
          required_files=("Sentiments/src/enhanced_dashboard.py" "Sentiments/src/auth_manager.py" "Sentiments/src/database_manager.py")

          for dir in "${required_dirs[@]}"; do
            if [ ! -d "$dir" ]; then
              echo "❌ Required directory missing: $dir"
              exit 1
            fi
            echo "✅ Directory found: $dir"
          done

          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "❌ Required file missing: $file"
              exit 1
            fi
            echo "✅ File found: $file"
          done

          echo "🎉 Project structure is valid!"

  notify:
    runs-on: ubuntu-latest
    needs: [test, deployment-check]
    if: always()

    steps:
      - name: Deployment Status
        run: |
          if [ "${{ needs.test.result }}" == "success" ] && [ "${{ needs.deployment-check.result }}" == "success" ]; then
            echo "🎉 ALL CHECKS PASSED - Ready for deployment!"
            echo "✅ Code quality: PASSED"
            echo "✅ Dependencies: PASSED" 
            echo "✅ Deployment config: PASSED"
            echo ""
            echo "🚀 Next steps:"
            echo "1. Merge to main branch"
            echo "2. Deploy to Streamlit Community Cloud"
            echo "3. Test live deployment"
          else
            echo "❌ DEPLOYMENT BLOCKED - Issues found"
            echo "🔍 Check the logs above for details"
            exit 1
          fi
